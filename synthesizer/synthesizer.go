package synthesizer

import "math"

type Synthesizer struct {
	N        int
	Dt       float64
	omega    []float64
	phi      []float64
	envelope func(float64) float64
}

func New(dt float64, n int, omega, phi []float64, envelope func(float64) float64) *Synthesizer {
	p := new(Synthesizer)
	p.Dt = dt
	p.N = n
	p.omega = omega
	p.phi = phi
	p.envelope = envelope
	return p
}

func (s *Synthesizer) Synthesize(a []float64) []float64 {
	t := 0.0
	y := make([]float64, s.N)
	m := len(s.omega)
	for j := range s.N {
		for i := range m {
			y[j] += a[i] * math.Sin(s.omega[i]*t+s.phi[i])
		}
		y[j] = s.envelope(t) * y[j]
		t += s.Dt
	}
	return y
}

// Default syntheize periods:
// 250 points divided equally in frecquency domain.
func DefaultPeriod() []float64 {
	return []float64{
		10.000000,
		1.995192,
		1.108144,
		0.767098,
		0.586572,
		0.474828,
		0.398847,
		0.343828,
		0.302148,
		0.269481,
		0.243188,
		0.221570,
		0.203481,
		0.188123,
		0.174921,
		0.163450,
		0.153391,
		0.144499,
		0.136581,
		0.129485,
		0.123091,
		0.117298,
		0.112026,
		0.107207,
		0.102786,
		0.098716,
		0.094955,
		0.091470,
		0.088232,
		0.085216,
		0.082398,
		0.079762,
		0.077288,
		0.074964,
		0.072775,
		0.070711,
		0.068760,
		0.066914,
		0.065164,
		0.063504,
		0.061926,
		0.060425,
		0.058995,
		0.057631,
		0.056328,
		0.055084,
		0.053893,
		0.052752,
		0.051659,
		0.050610,
		0.049603,
		0.048635,
		0.047704,
		0.046808,
		0.045945,
		0.045114,
		0.044312,
		0.043538,
		0.042790,
		0.042068,
		0.041370,
		0.040694,
		0.040041,
		0.039407,
		0.038794,
		0.038200,
		0.037623,
		0.037063,
		0.036520,
		0.035993,
		0.035481,
		0.034983,
		0.034499,
		0.034028,
		0.033569,
		0.033123,
		0.032689,
		0.032266,
		0.031853,
		0.031451,
		0.031059,
		0.030677,
		0.030304,
		0.029940,
		0.029585,
		0.029238,
		0.028899,
		0.028567,
		0.028244,
		0.027927,
		0.027618,
		0.027315,
		0.027019,
		0.026729,
		0.026446,
		0.026168,
		0.025896,
		0.025630,
		0.025369,
		0.025113,
		0.024863,
		0.024617,
		0.024377,
		0.024141,
		0.023909,
		0.023682,
		0.023459,
		0.023240,
		0.023025,
		0.022815,
		0.022608,
		0.022405,
		0.022205,
		0.022009,
		0.021816,
		0.021627,
		0.021441,
		0.021258,
		0.021078,
		0.020902,
		0.020728,
		0.020557,
		0.020389,
		0.020223,
		0.020060,
		0.019900,
		0.019743,
		0.019587,
		0.019435,
		0.019284,
		0.019136,
		0.018991,
		0.018847,
		0.018705,
		0.018566,
		0.018429,
		0.018294,
		0.018160,
		0.018029,
		0.017900,
		0.017772,
		0.017646,
		0.017522,
		0.017400,
		0.017279,
		0.017160,
		0.017043,
		0.016927,
		0.016813,
		0.016700,
		0.016589,
		0.016479,
		0.016371,
		0.016264,
		0.016159,
		0.016055,
		0.015952,
		0.015851,
		0.015750,
		0.015652,
		0.015554,
		0.015457,
		0.015362,
		0.015268,
		0.015175,
		0.015083,
		0.014993,
		0.014903,
		0.014814,
		0.014727,
		0.014640,
		0.014555,
		0.014470,
		0.014387,
		0.014304,
		0.014223,
		0.014142,
		0.014062,
		0.013983,
		0.013905,
		0.013828,
		0.013752,
		0.013676,
		0.013602,
		0.013528,
		0.013455,
		0.013383,
		0.013311,
		0.013240,
		0.013170,
		0.013101,
		0.013033,
		0.012965,
		0.012898,
		0.012831,
		0.012766,
		0.012701,
		0.012636,
		0.012573,
		0.012509,
		0.012447,
		0.012385,
		0.012324,
		0.012263,
		0.012203,
		0.012144,
		0.012085,
		0.012027,
		0.011969,
		0.011912,
		0.011855,
		0.011799,
		0.011743,
		0.011688,
		0.011634,
		0.011580,
		0.011526,
		0.011473,
		0.011420,
		0.011368,
		0.011317,
		0.011266,
		0.011215,
		0.011165,
		0.011115,
		0.011065,
		0.011017,
		0.010968,
		0.010920,
		0.010872,
		0.010825,
		0.010778,
		0.010732,
		0.010686,
		0.010640,
		0.010595,
		0.010550,
		0.010506,
		0.010462,
		0.010418,
		0.010375,
		0.010332,
		0.010289,
		0.010247,
		0.010205,
		0.010163,
		0.010122,
		0.010081,
		0.010040,
		0.010000,
	}
}
